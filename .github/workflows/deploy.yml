name: Deploy

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Version for Release (Allowed: major, minor, patch)'
        default: 'minor'
        required: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2020.1.15f1
  PROJECT_PATH: Test

jobs:
  bump-semvar:
    name: Create New Semantic Tag
    runs-on: ubuntu-latest
    outputs:
      semvar_version: ${{ steps.bump-semvar.outputs.semvar_version }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2.3.4

      - name: Get Latest Tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        if: ${{ github.event.inputs.level != '' }}
        with:
          semver_only: true

      - name: Bump Semantic Version
        uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        if: ${{ github.event.inputs.level != '' }}
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ github.event.inputs.level }}

      - name: Send Bumped Semvar
        run: |
          echo "Semvar => ${{ steps.bump-semver.outputs.new_version }}"
          echo "::set-output name=semvar_version::${{ steps.bump-semver.outputs.new_version }}"

  checklicense:
    name: Check for Unity License
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps: 
      - name: Check whether Unity Activation requests should be done
        id: checklicense_job
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: [checklicense, bump-semvar]
    if: needs.checklicense.outputs.is_unity_license_set == 'true' && needs.bump-semvar.outputs.bump-semvar != ''
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      # Checkout project
      - name: Checkout Project
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
          
      # Cache
      - name: Cache files 
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}-
            Library-
      
      # Build
      - name: Build
        uses: game-ci/unity-builder@v2.0-alpha-6
        with:
          buildName: Example Project
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Custom
          version: ${{ needs.bump-semvar.outputs.bump-semvar }}
      
      # Upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.2
        with:
          name: Build
          path: build
