name: Deploy

on:
  push:
    tags:
      - '*'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2020.1.15f1
  PROJECT_PATH: Test

jobs:
  check-license:
    name: Check for Unity License
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.check-license.outputs.is_unity_license_set }}
    steps: 
      - name: Check whether Unity Activation requests should be done
        id: check-license
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: [check-license]
    if: ${{ needs.check-license.outputs.is_unity_license_set == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      # Checkout project
      - name: Checkout Project
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
          
      # Cache
      - name: Cache files 
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}-
            Library-
      
      # Build
      - name: Build
        uses: game-ci/unity-builder@v2.0-alpha-6
        with:
          buildName: Example Project
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Custom
          version: ${{ github.ref }}
      
      # Upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.2
        with:
          name: Build
          path: build
  
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # Checkout Project
      - name: Checkout Project
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
      
      # Generate Changelog
      - name: Create Changelog
        id: changelog
        uses: loopwerk/conventional-changelog-action@latest
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          exclude_types: other,doc,chore
          config_file: .github/changelog-config.js
    
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [generate-changelog]
    steps:
      # Checkout Project
      - name: Checkout Project
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
      
      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Build
          path: build

      # Display structure of uploaded builds
      - name: Display structure of uploaded builds
        run: ls build
      
      # Zip the artifacts
      - name: Zip artifacts
        run: |
          cd build
          for file in $(ls -I "*.zip"); do zip -r "${file}.zip" "$file"; done
    
      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: false
    
    # Upload Files to Release
      - name: Upload Files to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*.zip
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
